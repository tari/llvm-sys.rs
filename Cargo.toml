[package]
description = "Bindings to LLVM's C API"
repository = "https://gitlab.com/taricorp/llvm-sys.rs"
readme = "README.md"
license = "MIT"
keywords = ["bindings", "llvm"]
categories = ["external-ffi-bindings"]
links = "llvm-21"
name = "llvm-sys"
version = "211.0.0-rc1"
authors = ["Peter Marheine <peter@taricorp.net>"]
build = "build.rs"

rust-version = "1.65.0"
edition = "2021"

[badges]
gitlab = { repository = "taricorp/llvm-sys.rs" }
maintenance = { status = "passively-maintained" }

[features]
# Require that the used version of LLVM exactly match that expected by this
# crate.
strict-versioning = []

# Do not attempt to link against LLVM libraries (useful if a different crate
# in your dependency tree provides them instead).
no-llvm-linking = []

# Do not attempt to build the LLVM_InitializeAllTarget* functions. Useful if
# the build host doesn't have a copy of LLVM to compile/link against and you do
# not use any of those functions.
disable-alltargets-init = []

# Linking preference.
# If none of these is selected, it defaults to force static linking to match
# the behaviour before this feature is introduced.
# Prefer dynamic linking to LLVM library if possible.
prefer-dynamic = []
# Force dynamic linking.
force-dynamic = []
# Prefer static linking to LLVM library if possible.
prefer-static = []
# Force static linking
force-static = []

[dependencies]
libc = "0.2"
clang-sys = { version = "1.2.2", optional = true }
tempfile = { version = "3.2.0", optional = true }

[build-dependencies]
anyhow = "1.0"
cc = "1.0"
lazy_static = "1.0"
regex-lite = "0.1.5"
semver = "1.0.7"

[lints.rust]
# LLVM_SYS_NOT_FOUND is set by build.rs if no LLVM library is located, which
# fails builds but still allows docs to be built.
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(LLVM_SYS_NOT_FOUND)"] }
